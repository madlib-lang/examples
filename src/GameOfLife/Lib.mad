import type { Maybe } from "Maybe"

import IO from "IO"
import List from "List"
import { Just, Nothing, fromMaybe } from "Maybe"



// Environment(width, height)
export type Environment = Environment(Integer, Integer)

export type Vitality = LiveCell | DeadCell

// Cell(living, x, y)
// tesselated cells are OtherCells
export type Cell
  = Cell(Vitality, Integer, Integer)
  | OtherCell(Vitality, Integer, Integer)
  | InvalidCell
export alias CellRow = List Cell
// export alias CellGrid = List CellRow
export type Culture = Culture(Environment, List Cell)
export alias NeighboringCells = {
  e :: Maybe Cell,
  n :: Maybe Cell,
  ne :: Maybe Cell,
  nw :: Maybe Cell,
  s :: Maybe Cell,
  se :: Maybe Cell,
  sw :: Maybe Cell,
  w :: Maybe Cell,
}

generateCulture :: Environment -> Culture
export generateCulture = (env) => do {
  cells = where(env) {
    Environment(w, h) =>
      pipe(
        List.range(0),
        map(
          (x) => pipe(
            List.range(0),
            map((y) => Cell(DeadCell, x, y)),
          )(h),
        ),
        List.flatten,
      )(w)
  }
  return Culture(env, cells)
}


getCell :: Culture -> Integer -> Integer -> Maybe Cell
export getCell = (culture, x, y) => where(culture) {
  Culture(Environment(width, height), list) =>
    List.find(
      where {
        Cell(_, x2, y2) =>
          x == x2 && y == y2

        OtherCell(_, x3, y3) =>
          x == x3 && y == y3

        _ =>
          false
      },
    )(list)
}
getNeighbors :: Culture -> Integer -> Integer -> NeighboringCells
export getNeighbors = (culture, x, y) => do {
  get = getCell(culture)
  up = y - 1
  left = x - 1
  right = x + 1
  down = y + 1
  return {
    nw: get(left, up),
    n: get(x, up),
    ne: get(right, up),
    e: get(left, y),
    w: get(right, y),
    sw: get(left, down),
    s: get(x, down),
    se: get(right, down),
  }
}

livingCell :: Maybe Cell -> Boolean
livingCell = where {
  Just(Cell(LiveCell, _, _)) =>
    true

  _ =>
    false
}

countNeighbors :: Culture -> Integer -> Integer -> Integer
countNeighbors = (culture, x, y) => pipe(
  getNeighbors(culture, x),
  (nay) => pipe(
    List.filter(livingCell),
    List.length,
  )([nay.nw, nay.n, nay.ne, nay.w, nay.e, nay.sw, nay.s, nay.se]),
)(y)

// next :: Culture -> Culture
// next = (culture) => {
//   where (culture) {
//     Culture(Environment(width, height), cellGrid) => map(
//       map(where {
//         Cell(LiveCell, x, y) => countNeighbors
//         Cell(DeadCell, x, y) => 
//       })
//     )
//   }
// }
